{"Key":"cache_infographics","Title":"Cache - Use it Wisely","Subtitle":"A Place to store most frequently accessed Data","Avatar":"/img/logo/cache.png","Color":"Red","Articles":[{"Key":"article_1619513323561","Color":"Purple","SectionHeight":"150px","Layout":"layout-3321","Sections":[{"Key":"article_1629513323562","Color":"Purple","Order":0,"Title":"Business","Content":"Which Business use-case or requirement in your system requires high throughput, fast response, or low latency? What level of inconsistency is fine for the application?","Subtitle":"Use case / Requirements"},{"Key":"section_1625647675243","Color":"Purple","Order":1,"Title":"Data","Subtitle":"Transactional / Master","Content":"What kind of data do you want to store or maintain? Objects, Static Data, Simple Key-Value pairs, or complex data structures? Are these transactional or Master data sets?"},{"Key":"section_1625647803718","Color":"Purple","Order":2,"Title":"Mode","Subtitle":"Standalone / Distributed","Content":"Do you need an in-process or shared Cache in a single node or distributed cache for N number of nodes? If distributed what about performance, reliability, scalability, and availability?"}]},{"Key":"article_1625647868968","SectionHeight":"150px","Color":"Indigo","Order":1,"Sections":[{"Key":"section_1625648012368","Color":"Indigo","Order":0,"Title":"Read Through","Subtitle":"Lazy Loading","Content":"Load data into the cache only when necessary. All the reads are directed to the cache, on a cache miss, fetches data from the data source, stores a copy, and then serves it. "},{"Key":"section_1625648058900","Color":"Indigo","Order":1,"Title":"Write Through","Subtitle":"No Stale Data","Content":"All the writes are directed to the cache system which intern writes to the data source. Both of these operations should occur in a single transaction otherwise there will be data loss. "},{"Key":"section_1704130425152","Color":"Indigo","Title":"Write Behind","Subtitle":"Write Back / Async Write","Content":"All the write operations are directed to the cache. Then after a certain configured interval, the data will be written to the underlying data source asynchronously.","Order":2}],"Title":"Data Access Strategies","Subtitle":"Dictate the relationship between Data Source and Caching System","Footer":"Caching is tradeoff between Performance and Freshness. ","Layout":"layout-3221"},{"Key":"article_1625648823706","SectionHeight":"150px","Layout":"layout-2211","Color":"Teal","Title":"Node","Subtitle":"A running instance of elastic search","Footer":"Just like a cluster, a node is identified by a name","Order":3,"Sections":[{"Key":"section_1625648887280","Color":"Teal","Title":"Master Node","Content":"A node that has the master role, which makes it eligible to be elected as the master node, which controls the cluster management and configuration actions such as adding and removing nodes.","Subtitle":"A node that has the master role","Order":0},{"Key":"section_1625648922959","Color":"Teal","Title":"Data Node","Subtitle":"A node that has the data role","Content":"A node that has the data role. Data nodes hold data and perform data-related operations such as CRUD, search, and aggregations. A node with the data role can fill any of the specialized data node roles.","Order":1},{"Key":"section_1625648952072","Color":"Teal","Title":"Ingestion Node","Subtitle":"A node that has the ingest role","Content":"A node that has the ingest role. Ingest nodes are able to apply an ingest pipeline to a document in order to transform and enrich the document before indexing. With a heavy ingest load, it makes sense to use dedicated ingest nodes.","Order":2},{"Key":"section_1625648994896","Color":"Teal","Title":"Coordinator Nodes","Content":"Coordinating only nodes can benefit large clusters by offloading the coordinating node role from data and master-eligible nodes. Adding too many coordinating only nodes to a cluster can increase the burden on the entire cluster.\n","Subtitle":"Can benefit large clusters","Order":3}]},{"Key":"article_1625648152983","SectionHeight":"150px","Color":"Red","Title":"Index","Subtitle":" A Logical Namespace","Footer":"An index is like a table in a relational database. It is a logical namespace (must be lowercased)","Order":2,"Sections":[{"Key":"section_1625648228520","Color":"Red","Title":"Hot","Content":"Handles all indexing of new data in the cluster and holds the most recent daily indices that tend to be queried most frequently.","Order":0,"Subtitle":" Frequent Update"},{"Key":"section_1625648285720","Color":"Red","Title":"Warm","Content":"Handles a large amount of read-only indices that are not queried frequently. With read-only indices, warm nodes can use very large spindle drives instead of SSD storage.","Order":1,"Subtitle":"No Update"},{"Key":"section_1625648548638","Color":"Red","Title":"Cold","Content":"Once data is no longer being updated, it can move from the warm tier to the cold tier where it stays while being queried infrequently. The cold tier is still a responsive query tier, but data in the cold tier is not normally updated.","Order":2,"Subtitle":"Infrequent Queries"},{"Key":"section_1625648627436","Color":"Red","Title":"Frozen","Content":"Once data is no longer being queried, or being queried rarely, it may move from the cold tier to the frozen tier where it stays for the rest of its life.","Order":3,"Subtitle":"Rarely Queries"}],"Layout":"layout-2211"}]}
