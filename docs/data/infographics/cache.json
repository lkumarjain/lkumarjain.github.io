{
  "Key": "cache_infographics",
  "Title": "Cache - Use it Wisely",
  "Subtitle": "A Place to store most frequently accessed Data",
  "Color": "Red",
  "Articles": [
    {
      "Key": "article_1619513323561",
      "Color": "Purple",
      "SectionHeight": "150px",
      "Layout": "layout-3321",
      "Sections": [
        {
          "Key": "article_1629513323562",
          "Color": "Purple",
          "Order": 0,
          "Title": "Business",
          "Content": "Which Business use-case or requirement in your system requires high throughput, fast response, or low latency? What level of inconsistency is fine for the application?",
          "Subtitle": "Use case / Requirements"
        },
        {
          "Key": "section_1625647675243",
          "Color": "Purple",
          "Order": 1,
          "Title": "Data",
          "Subtitle": "Transactional / Master",
          "Content": "What kind of data do you want to store or maintain? Objects, Static Data, Simple Key-Value pairs, or complex data structures? Are these transactional or Master data sets?"
        },
        {
          "Key": "section_1625647803718",
          "Color": "Purple",
          "Order": 2,
          "Title": "Mode",
          "Subtitle": "Standalone / Distributed",
          "Content": "Do you need an in-process or shared Cache in a single node or distributed cache for N number of nodes? If distributed what about performance, reliability, scalability, and availability?"
        }
      ]
    },
    {
      "Key": "article_1625647868968",
      "SectionHeight": "150px",
      "Color": "Indigo",
      "Order": 1,
      "Sections": [
        {
          "Key": "section_1625648012368",
          "Color": "Indigo",
          "Order": 0,
          "Title": "Read Through",
          "Subtitle": "Lazy Loading",
          "Content": "Load data into the cache only when necessary. All the reads are directed to the cache, on a cache miss, fetches data from the data source, stores a copy, and then serves it. "
        },
        {
          "Key": "section_1625648058900",
          "Color": "Indigo",
          "Order": 1,
          "Title": "Write Through",
          "Subtitle": "No Stale Data",
          "Content": "All the writes are directed to the cache system which intern writes to the data source. Both of these operations should occur in a single transaction otherwise there will be data loss. "
        },
        {
          "Key": "section_1704130425152",
          "Color": "Indigo",
          "Title": "Write Behind",
          "Subtitle": "Write Back / Async Write",
          "Content": "All the write operations are directed to the cache. Then after a certain configured interval, the data will be written to the underlying data source asynchronously.",
          "Order": 2
        },
        {
          "Key": "section_1704130877596",
          "Color": "Indigo",
          "Title": "Refresh Ahead",
          "Subtitle": "Refresh Before Expiary",
          "Order": 3,
          "Content": "All the required data loaded into the cache before a first access. The data is refreshed before it gets expired (A configured interval - usually less then expiary) to serve latest data on the next possible access. "
        },
        {
          "Key": "section_1704131121862",
          "Color": "Indigo",
          "Title": "Cache Aside",
          "Subtitle": "Logically Place Aside",
          "Content": "The application directly communicates with both data source and cache. On cache hit return data, whereas on cache miss, retrive data from data source, return and then store in the cache.",
          "Order": 4
        },
        {
          "Key": "section_1704131494759",
          "Color": "Indigo",
          "Title": "Write Around",
          "Subtitle": "Write bypasses cache ",
          "Content": "All the write operations bypass the cache and directly write into the data source. The data does not reflect on the cache immediately. This is most performant in instances where data is only written once.",
          "Order": 5
        }
      ],
      "Title": "Data Access Strategies",
      "Subtitle": "Dictate the relationship between Data Source and Caching System",
      "Footer": "Caching is tradeoff between Performance and Freshness. ",
      "Layout": "layout-3221"
    },
    {
      "Key": "article_1625648823706",
      "SectionHeight": "150px",
      "Color": "Teal",
      "Order": 3,
      "Sections": [
        {
          "Key": "section_1625648887280",
          "Color": "Teal",
          "Order": 0,
          "Title": "Time-Based",
          "Subtitle": "Predetermined Time",
          "Content": "The data is removed from the cache after a fixed amount of time. This is useful for data that is not frequently accessed and does not need to be kept in the cache for long periods."
        },
        {
          "Key": "section_1625648922959",
          "Color": "Teal",
          "Order": 1,
          "Title": "Event-Based",
          "Content": "The data is removed or refreshed from/in the cache when a specific event is triggered in the system. This is useful when the cached data must be updated on a specific event.",
          "Subtitle": "PREDETERMINED Event"
        },
        {
          "Key": "section_1625648952072",
          "Color": "Teal",
          "Order": 2,
          "Title": "Size-Based",
          "Subtitle": "Predetermined size",
          "Content": "The data is removed from the cache based on the size of the cache. When the cache reaches a predetermined size, some of the data is removed to make room for new data."
        }
      ],
      "Layout": "layout-3221",
      "Title": "Eviction / Invalidation Policy",
      "Subtitle": "Ensures that the size of cache does not exceed the maximum limit",
      "Footer": "Poorly chosen policies can result in increased cache misses and reduced system performance."
    },
    {
      "Key": "article_1625648152983",
      "Color": "Red",
      "Order": 2,
      "Sections": [
        {
          "Key": "section_1625648228520",
          "Color": "Red",
          "Order": 0,
          "Title": "Object Store",
          "Subtitle": "Store Immutable Objects",
          "Content": "Suitable to store unmodifiable objects like HTTP Responses, Database results, and Rendered HTML Pages."
        },
        {
          "Key": "section_1625648285720",
          "Color": "Red",
          "Order": 1,
          "Subtitle": "Simple Yet Powerful",
          "Content": "Store simple string key to string value is almost supported by all the cache.",
          "Title": "Key-Value"
        },
        {
          "Key": "section_1625648548638",
          "Color": "Red",
          "Order": 2,
          "Subtitle": "No Conversion Overhead",
          "Content": "Only if your use case supports storing in and retrieving data from natively supported data structures.",
          "Title": "Native"
        },
        {
          "Key": "section_1625648627436",
          "Color": "Red",
          "Order": 3,
          "Title": "In-Memory",
          "Subtitle": "In-Process",
          "Content": "Suitable to store any key-value or objects directly accessible through the runtime memory in the same node."
        },
        {
          "Key": "section_1704134022424",
          "Color": "Red",
          "Title": "Static File",
          "Subtitle": "Static Files or Binary Data",
          "Content": "Suitable to store static files or binary data like Images, Executables, Java Scripts, Videos, Audio, or CSS, etc.",
          "Order": 4
        }
      ],
      "Layout": "layout-3221",
      "Title": "Data Type Wise",
      "Subtitle": "Ways to Store Data efficiently",
      "Footer": "Dependents on what type of data they can efficiently store.",
      "SectionHeight": "125px"
    },
    {
      "Key": "article_1704215963180",
      "SectionHeight": "150px",
      "Layout": "layout-3321",
      "Title": "Caching Mode",
      "Subtitle": "Enhance Application Performance",
      "Order": 4,
      "Sections": [
        {
          "Key": "section_1704216062188",
          "Subtitle": "In-Process Cache",
          "Title": "In-Memory",
          "Content": "This is a caching mode for non-distributed (standalone) systems, the applications instantiate and manage their own or 3rd party cache objects. Both the application and cache are in the same memory space.",
          "Order": 0,
          "Color": "DeepPurple"
        },
        {
          "Key": "section_1704216166212",
          "Title": "Distributed",
          "Subtitle": "Span across servers",
          "Content": "Distributed cache is a data caching mechanism that spans across multiple networked servers or nodes. Think about millions of requests per minute, petabytes, or terabytes of data in the context.",
          "Order": 1,
          "Color": "DeepPurple"
        },
        {
          "Key": "section_1704216283904",
          "Title": "Persistent",
          "Subtitle": "disk drives",
          "Order": 2,
          "Content": "Persistent cache stores frequently accessed or critical data on disk drives to offer a balance b/w performance and data persistence. It enables applications to retrieve data more rapidly than external sources.",
          "Color": "DeepPurple"
        }
      ],
      "Color": "DeepPurple"
    }
  ],
  "Avatar": "/img/logo/redis.png"
}
